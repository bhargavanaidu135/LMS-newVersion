pipeline {
    
    agent {
        label 'docker_lmsbackend'
    }
     
     stages {
         stage('pull code')  {
             steps {
                 
                 checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/bhargavanaidu135/LMS-newVersion.git']]])
             }
           }
         stage('notifying started job'){
             steps { 
                 script {
                     slackSend (channel: 'bhargav_space', message: "Started: The Job '${env.JOB_NAME} [${env.BUILD_ID}]' teamdDomain: '${env.WORKSPACE}'")
                  }
               } 
            }     
          stage('manager approval'){ 
             
                steps { 
                   script { 
                       
                   mail bcc: '', subject: "APPROVAL REQUIRED FOR THE $JOB_NAME" , body: """Build No.[$BUILD_NUMBER] required an approval for deployment. please click on the link ${BUILD_URL}console for more info. Thank you from bhargav""", cc: '', from: "user1@gmail.com", to: "user2@gmail.com"     
                   def deploymentTimeout = input id: 'Deploy', message: 'Deploy to production?', parameters: [choice(choices: ['0', '5', '10'], description: 'minutes to delay deployment?', name: 'deploymentTimeout')]
                   sleep time: deploymentTimeout.toInteger(), unit: 'MINUTES'
                   
                   }
                }    
            }
            
            stage('create postgres'){
               steps { 
                 script{
                   
                   sh 'docker run -d -p 5432:5432 -e POSTGRES_PASSWORD=docker -e POSTGRES_USER=postgres -e POSTGRES_DB=postgres --rm -v ~/docker/volumes/postgres:/var/lib/postgresql/data --name postsql postgres'
                   sh 'docker network connect lmsnet2 postsql'    
                     
                 }
              }
            } 
            stage('build dockerfile'){
              
                steps {
                    dir("${env.WORKSPACE}/api"){
                            sh "pwd"
                withCredentials([usernamePassword(credentialsId: 'docker_hub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {        
                sh 'docker build -t $dockerHubUser/$JOB_NAME:v1.$BUILD_ID .' 
                sh 'sudo docker run -dt --name apiserver --network lmsnet2 -p 8080:8080 -e DATABASE_URL=postgresql://postgres:docker@postsql:5432/postgres -e PORT=8080 -e MODE=production $dockerHubUser/$JOB_NAME:v1.$BUILD_ID'
                }
              }    
            }  
         }    
          stage('Docker Push') {
     	
               steps {
      	          withCredentials([usernamePassword(credentialsId: 'docker_hub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
        	      sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
        	      sh 'docker push $dockerHubUser/$JOB_NAME:v1.$BUILD_ID'
      	          }
              }
          } 
        stage('send build results'){ 
            steps {
                
                   echo 'Send Email'
                
            }  
          }  
        }    
            
             post {
                 
                 always {
                   emailext to: "user1@gmail.com,user2@gmail.com",
                   subject: "BUILD LOG OF THE JOB ${JOB_NAME}",
                   body: "plese kindly open the link ${BUILD_URL}console for more info regarding the console output of build no.$BUILD_ID",
                   attachLog: true
                 }

                  success {
                   slackSend (color: '#00FF00', channel: 'bhargav_space', message: "Job '${env.JOB_NAME} with BuildNo.[${env.BUILD_ID}] has succeeded' teamdDomain: '${env.WORKSPACE}'")
                  }
                  
                  failure {
                   slackSend (color: '#FF0000', channel: 'bhargav_space', message: "Job '${env.JOB_NAME} with BuildNo.[${env.BUILD_ID}] has failed' teamdDomain: '${env.WORKSPACE}'")  
                      
                   }
                  
                }           
        
        
   }    
